# -*- coding: utf-8 -*-
"""orange-cat-or-not.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GkJD34LlGOWznG6vn8ayHT7NEd_RoDQC
"""

# Create a model that can classify an image as "orange cat" or "not orange cat", using
# transfer learning on the MobileNetV2 model. This code is heavily adapted from
# the following article by Ferhat Culfaz: 
# https://towardsdatascience.com/transfer-learning-using-mobilenet-and-keras-c75daf7ff299

# import dependencies
import keras
from keras.applications.mobilenet_v2 import MobileNetV2
from keras.applications.mobilenet_v2 import preprocess_input, decode_predictions
from keras import backend as K
from keras.layers.core import Dense, Activation
from keras.optimizers import Adam
from keras.metrics import categorical_crossentropy
from keras.preprocessing.image import ImageDataGenerator
from keras.preprocessing import image
from keras.models import Model
from keras.applications import imagenet_utils
from keras.layers import Dense,GlobalAveragePooling2D

import numpy as np
from IPython.display import Image

# instantiate model and remove the top layer
base_model=MobileNetV2(weights='imagenet',include_top=False) #imports the mobilenet model and discards the last 1000 neuron layer.

# add some more layers
x=base_model.output
x=GlobalAveragePooling2D()(x)
x=Dense(1024,activation='relu')(x) # we add dense layers so that the model can learn more complex functions and classify for better results.
x=Dense(1024,activation='relu')(x) # dense layer 2
x=Dense(512,activation='relu')(x) # dense layer 3
preds=Dense(2,activation='softmax')(x) # final layer with softmax activation

# specify the inputs/outputs to create the model
model=Model(inputs=base_model.input,outputs=preds)

# set the top 3 layers to be trainable
for layer in model.layers:
    layer.trainable=False

for layer in model.layers[-3:]:
    layer.trainable=True

# set parameters for training and point to our directory of images
train_datagen=ImageDataGenerator(preprocessing_function=preprocess_input)

train_generator=train_datagen.flow_from_directory('./sample_data/downloads',
                                                 target_size=(224,224),
                                                 color_mode='rgb',
                                                 batch_size=32,
                                                 class_mode='categorical',
                                                 classes=['not-orange-cat', 'orange-cat'],
                                                 shuffle=True)

# compile the model - use Adam optimizer, set loss function to 'categorical_crossentropy', set accuracy as the metric
model.compile(optimizer='Adam',loss='categorical_crossentropy',metrics=['accuracy'])

# train the model against our images
step_size_train=train_generator.n//train_generator.batch_size
model.fit_generator(generator=train_generator,
                   steps_per_epoch=step_size_train,
                   epochs=7)

# preprocess the image and then make a prediction against our model
def load_image(img_path, show=False):

    img = image.load_img(img_path, target_size=(150, 150))
    img_tensor = image.img_to_array(img)                    # (height, width, channels)
    img_tensor = np.expand_dims(img_tensor, axis=0)         # (1, height, width, channels), add a dimension because the model expects this shape: (batch_size, height, width, channels)
    img_tensor /= 255.                                      # imshow expects values in the range [0, 1]

    if show:
        plt.imshow(img_tensor[0])                           
        plt.axis('off')
        plt.show()

    return img_tensor

# sanity checks
#img_path = './sample_data/predict-test/not-orange-cat/tabby.jpg'
img_path = './sample_data/predict-test/orange-cat/IMG_3713-edit.jpg'
new_image = load_image(img_path)

# ['not-orange-cat', 'orange-cat']
pred = model.predict(new_image)

pred

# save the model so we can convert to tensorflowjs
model.save('orange-not-orange-model-v2.h5')